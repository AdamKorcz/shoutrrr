{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shoutrrr Notification library for gophers and their furry friends. Heavily inspired by caronc/apprise . Using Shoutrrr \u00b6 As a package \u00b6 Using shoutrrr is easy! There is currently two ways of using it as a package. Using the direct send command \u00b6 url := \"slack://token-a/token-b/token-c\" err := shoutrrr.Send(url, \"Hello world (or slack channel) !\") Using a sender \u00b6 url := \"slack://token-a/token-b/token-c\" sender := shoutrrr.CreateSender(url) sender.Send(\"Hello world (or slack channel) !\", map[string]string { /* ... */ }) Through the CLI \u00b6 Start by running the build.sh script. You may then run the shoutrrr executable: $ ./shoutrrr Usage: ./shoutrrr <ActionVerb> [...] Possible actions: send, verify, generate Action details \u00b6 $ ./shoutrrr send Usage: ./shoutrrr send [OPTIONS] <URL> <Message [...]> OPTIONS: -verbose display additional output $ ./shoutrrr verify Usage: ./shoutrrr send [OPTIONS] <URL> <Message [...]> $ ./shoutrrr generate Usage: ./shoutrrr generate [OPTIONS] <service> Service URL:s \u00b6 To make it easy and streamlined to consume shoutrrr regardless of the notification service you want to use, we've implemented a notification service url schema. To send notifications, instantiate the ShoutrrrrClient using one of the service urls below. Service Format Discord discord://channel/token Pushover pushover://token/user/device Slack slack://token-a/token-b/token-c slack://botname/token-a/token-b/token-c Teams teams://token-a/token-b/token-c Telegram telegram://api-token/channel telegram://api-token/channel-a/channel-b/channel-c/... Gotify gotify://gotify-host/token","title":"Home"},{"location":"#using_shoutrrr","text":"","title":"Using Shoutrrr"},{"location":"#as_a_package","text":"Using shoutrrr is easy! There is currently two ways of using it as a package.","title":"As a package"},{"location":"#using_the_direct_send_command","text":"url := \"slack://token-a/token-b/token-c\" err := shoutrrr.Send(url, \"Hello world (or slack channel) !\")","title":"Using the direct send command"},{"location":"#using_a_sender","text":"url := \"slack://token-a/token-b/token-c\" sender := shoutrrr.CreateSender(url) sender.Send(\"Hello world (or slack channel) !\", map[string]string { /* ... */ })","title":"Using a sender"},{"location":"#through_the_cli","text":"Start by running the build.sh script. You may then run the shoutrrr executable: $ ./shoutrrr Usage: ./shoutrrr <ActionVerb> [...] Possible actions: send, verify, generate","title":"Through the CLI"},{"location":"#action_details","text":"$ ./shoutrrr send Usage: ./shoutrrr send [OPTIONS] <URL> <Message [...]> OPTIONS: -verbose display additional output $ ./shoutrrr verify Usage: ./shoutrrr send [OPTIONS] <URL> <Message [...]> $ ./shoutrrr generate Usage: ./shoutrrr generate [OPTIONS] <service>","title":"Action details"},{"location":"#service_urls","text":"To make it easy and streamlined to consume shoutrrr regardless of the notification service you want to use, we've implemented a notification service url schema. To send notifications, instantiate the ShoutrrrrClient using one of the service urls below. Service Format Discord discord://channel/token Pushover pushover://token/user/device Slack slack://token-a/token-b/token-c slack://botname/token-a/token-b/token-c Teams teams://token-a/token-b/token-c Telegram telegram://api-token/channel telegram://api-token/channel-a/channel-b/channel-c/... Gotify gotify://gotify-host/token","title":"Service URL:s"}]}