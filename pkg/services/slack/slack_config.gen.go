// Code generated by "shoutrrr-gen --lang go"; DO NOT EDIT.
package slack

import (
	"fmt"
	"net/url"
	_ "strings"

	"github.com/containrrr/shoutrrr/pkg/conf"
	"github.com/containrrr/shoutrrr/pkg/types"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          (
// (___________________________________)

type Config struct {
	BotName  string `key:"botname,username" `
	Channel  string `url:"host" `
	Color    string `key:"color" `
	Icon     string `key:"icon,icon_emoji,icon_url" `
	ThreadTS string `key:"thread_ts" `
	Title    string `key:"title" `
	Token    *Token `url:"user,password" `
}

type configProp int

const (
	propBotName  configProp = 0
	propChannel  configProp = 1
	propColor    configProp = 2
	propIcon     configProp = 3
	propThreadTS configProp = 4
	propTitle    configProp = 5
	propToken    configProp = 6
	propCount               = 7
)

var propInfo = types.ConfigPropInfo{
	PropNames: []string{
		"BotName",
		"Channel",
		"Color",
		"Icon",
		"ThreadTS",
		"Title",
		"Token",
	},

	// Note that propKeys may not align with propNames, as a property can have no or multiple keys
	Keys: []string{
		"botname",
		"color",
		"icon",
		"icon_emoji",
		"icon_url",
		"thread_ts",
		"title",
		"username",
	},

	DefaultValues: []string{
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},

	PrimaryKeys: []int{
		0,
		-1,
		1,
		2,
		5,
		6,
		-1,
	},

	KeyPropIndexes: map[string]int{
		"botname":    0,
		"color":      2,
		"icon":       3,
		"icon_emoji": 3,
		"icon_url":   3,
		"thread_ts":  4,
		"title":      5,
		"username":   0,
	},
}

func (_ *Config) PropInfo() *types.ConfigPropInfo {
	return &propInfo
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         (
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		User:     conf.UserInfoOrNil(config.Token.UserInfo()),
		Host:     config.Channel,
		Path:     "",
		RawQuery: conf.QueryValues(config).Encode(),
		Scheme:   Scheme,
	}
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         (
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(configURL *url.URL) error {
	if lc, ok := (interface{})(config).(types.ConfigWithLegacyURLSupport); ok {
		configURL = lc.UpdateLegacyURL(configURL)
	}
	updates := make(map[int]string, propCount)
	updates[int(propChannel)] = configURL.Hostname()
	updates[int(propToken)] = configURL.User.String()
	if configURL.Path != "" && configURL.Path != "/" {
		return fmt.Errorf("unexpected path in config URL: %v", configURL.Path)
	}

	for key, value := range configURL.Query() {

		if propIndex, found := propInfo.PropIndexFor(key); found {
			updates[propIndex] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates)
	if err != nil {
		return err
	}

	if config.Channel == "" {
		return fmt.Errorf("channel missing from config URL")
	}

	if config.emptyToken(config.Token) {
		return fmt.Errorf("token missing from config URL")
	}

	return nil
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                (
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[int]string) error {
	var last_err error
	for index, value := range updates {
		switch configProp(index) {
		case propBotName:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.BotName = val
			}
		case propChannel:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Channel = val
			}
		case propColor:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Color = val
			}
		case propIcon:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Icon = val
			}
		case propThreadTS:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.ThreadTS = val
			}
		case propTitle:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Title = val
			}
		case propToken:
			if val, err := config.setToken(value); err != nil {
				last_err = err
			} else {
				config.Token = val
			}
		default:
			return fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %v: %v", propInfo.PropNames[index], last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) PropValue(prop int) string {
	switch configProp(prop) {
	case propBotName:
		return conf.FormatTextValue(config.BotName)
	case propChannel:
		return conf.FormatTextValue(config.Channel)
	case propColor:
		return conf.FormatTextValue(config.Color)
	case propIcon:
		return conf.FormatTextValue(config.Icon)
	case propThreadTS:
		return conf.FormatTextValue(config.ThreadTS)
	case propTitle:
		return conf.FormatTextValue(config.Title)
	case propToken:
		return config.getToken()
	default:
		return ""
	}
}
