// Code generated by "shoutrrr-gen pkg/services/bark/config-spec.yml"; DO NOT EDIT.
package bark

import (
	"github.com/containrrr/shoutrrr/pkg/types"
	"github.com/containrrr/shoutrrr/pkg/format"
	"net/url"
)

type Config struct {
	Copy string
	DeviceKey string
	Group string
	Host string
	Path string
	Scheme string
	Sound string
	Badge int64
	Title string
	Icon string
	URL string
	Category string
}

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	resolver := format.NewPropKeyResolver(config)
	return config.getURL(&resolver)
}

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(url *url.URL) error {
	resolver := format.NewPropKeyResolver(config)
	return config.setURL(&resolver, url)
}

func (config *Config) getURL(resolver types.ConfigQueryResolver) *url.URL {
	return &url.URL{
		User: url.UserPassword("", config.DeviceKey),
		Host: config.Host,
	}
}

func (config *Config) setURL(resolver types.ConfigQueryResolver, url *url.URL) error {
	config.Host = url.Host
	if pwd, found := url.User.Password(); found {
		config.DeviceKey = pwd
	}

	if qv := url.Query()["badge"]; len(qv) == 1 {
		// TODO: Implement prop type setter for "number"
	}
	if qv := url.Query()["icon"]; len(qv) == 1 {
		config.Icon = qv[0]
	}
	if qv := url.Query()["url"]; len(qv) == 1 {
		config.URL = qv[0]
	}
	if qv := url.Query()["category"]; len(qv) == 1 {
		config.Category = qv[0]
	}
	if qv := url.Query()["copy"]; len(qv) == 1 {
		config.Copy = qv[0]
	}
	if qv := url.Query()["group"]; len(qv) == 1 {
		config.Group = qv[0]
	}
	if qv := url.Query()["title"]; len(qv) == 1 {
		config.Title = qv[0]
	}
	if qv := url.Query()["scheme"]; len(qv) == 1 {
		config.Scheme = qv[0]
	}
	if qv := url.Query()["sound"]; len(qv) == 1 {
		config.Sound = qv[0]
	}

	return nil
}

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{
	}
}
