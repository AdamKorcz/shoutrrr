// Code generated by "shoutrrr-gen --lang go"; DO NOT EDIT.
package bark

import (
	"fmt"
	"net/url"

	"github.com/containrrr/shoutrrr/pkg/conf"
	"github.com/containrrr/shoutrrr/pkg/types"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          (
// (___________________________________)

type Config struct {
	Badge     int64  `key:"badge" `
	Category  string `key:"category" `
	Copy      string `key:"copy" `
	DeviceKey string `url:"password" `
	Group     string `key:"group" `
	Host      string `url:"host,port" `
	Icon      string `key:"icon" `
	Path      string `url:"path" `
	Scheme    string `key:"scheme" `
	Sound     string `key:"sound" `
	Title     string `key:"title" `
	URL       string `key:"url" `
}

type configProp int

const (
	propBadge     configProp = 0
	propCategory  configProp = 1
	propCopy      configProp = 2
	propDeviceKey configProp = 3
	propGroup     configProp = 4
	propHost      configProp = 5
	propIcon      configProp = 6
	propPath      configProp = 7
	propScheme    configProp = 8
	propSound     configProp = 9
	propTitle     configProp = 10
	propURL       configProp = 11
	propCount                = 12
)

var propInfo = types.ConfigPropInfo{
	PropNames: []string{
		"Badge",
		"Category",
		"Copy",
		"DeviceKey",
		"Group",
		"Host",
		"Icon",
		"Path",
		"Scheme",
		"Sound",
		"Title",
		"URL",
	},

	// Note that propKeys may not align with propNames, as a property can have no or multiple keys
	Keys: []string{
		"badge",
		"category",
		"copy",
		"group",
		"icon",
		"scheme",
		"sound",
		"title",
		"url",
	},

	DefaultValues: []string{
		"0",
		"",
		"",
		"",
		"",
		"",
		"",
		"/",
		"https",
		"",
		"",
		"",
	},

	PrimaryKeys: []int{
		0,
		1,
		2,
		-1,
		3,
		-1,
		4,
		-1,
		5,
		6,
		7,
		8,
	},

	KeyPropIndexes: map[string]int{
		"badge":    0,
		"category": 1,
		"copy":     2,
		"group":    4,
		"icon":     6,
		"scheme":   8,
		"sound":    9,
		"title":    10,
		"url":      11,
	},
}

func (_ *Config) PropInfo() *types.ConfigPropInfo {
	return &propInfo
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         (
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		User:     conf.UserInfoOrNil(url.UserPassword("", config.DeviceKey)),
		Host:     config.Host,
		Path:     conf.JoinPath(string(config.Path)),
		RawQuery: conf.QueryValues(config).Encode(),
		Scheme:   Scheme,
	}
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         (
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(configURL *url.URL) error {
	if lc, ok := (interface{})(config).(types.ConfigWithLegacyURLSupport); ok {
		configURL = lc.UpdateLegacyURL(configURL)
	}
	updates := make(map[int]string, propCount)
	updates[int(propHost)] = configURL.Host
	if pwd, found := configURL.User.Password(); found {
		updates[int(propDeviceKey)] = pwd
	}
	updates[int(propPath)] = configURL.Path

	for key, value := range configURL.Query() {

		if propIndex, found := propInfo.PropIndexFor(key); found {
			updates[propIndex] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates)
	if err != nil {
		return err
	}

	if config.DeviceKey == "" {
		return fmt.Errorf("deviceKey missing from config URL")
	}

	if config.Host == "" {
		return fmt.Errorf("host missing from config URL")
	}

	return nil
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                (
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[int]string) error {
	var last_err error
	for index, value := range updates {
		switch configProp(index) {
		case propBadge:
			if val, err := conf.ParseNumberValue(value, 10); err != nil {
				last_err = err
			} else {
				config.Badge = val
			}
		case propCategory:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Category = val
			}
		case propCopy:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Copy = val
			}
		case propDeviceKey:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.DeviceKey = val
			}
		case propGroup:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Group = val
			}
		case propHost:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Host = val
			}
		case propIcon:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Icon = val
			}
		case propPath:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Path = val
			}
		case propScheme:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Scheme = val
			}
		case propSound:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Sound = val
			}
		case propTitle:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Title = val
			}
		case propURL:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.URL = val
			}
		default:
			return fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %v: %v", propInfo.PropNames[index], last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) PropValue(prop int) string {
	switch configProp(prop) {
	case propBadge:
		return conf.FormatNumberValue(config.Badge, 10)
	case propCategory:
		return conf.FormatTextValue(config.Category)
	case propCopy:
		return conf.FormatTextValue(config.Copy)
	case propDeviceKey:
		return conf.FormatTextValue(config.DeviceKey)
	case propGroup:
		return conf.FormatTextValue(config.Group)
	case propHost:
		return conf.FormatTextValue(config.Host)
	case propIcon:
		return conf.FormatTextValue(config.Icon)
	case propPath:
		return conf.FormatTextValue(config.Path)
	case propScheme:
		return conf.FormatTextValue(config.Scheme)
	case propSound:
		return conf.FormatTextValue(config.Sound)
	case propTitle:
		return conf.FormatTextValue(config.Title)
	case propURL:
		return conf.FormatTextValue(config.URL)
	default:
		return ""
	}
}
