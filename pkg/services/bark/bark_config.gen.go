// Code generated by "shoutrrr-gen --lang go ../../../spec/bark.yml"; DO NOT EDIT.
package bark

import (
	"fmt"
	"net/url"
	"strings"

	"github.com/containrrr/shoutrrr/pkg/types"
	"github.com/containrrr/shoutrrr/pkg/format"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          ( 
// (___________________________________)

type Config struct {
	Badge     int64 `key:"badge" `
	Category  string `key:"category" `
	Copy      string `key:"copy" `
	DeviceKey string `url:"password" `
	Group     string `key:"group" `
	Host      string `url:"host" `
	Icon      string `key:"icon" `
	Path      string `url:"path1" `
	Scheme    string `key:"scheme" `
	Sound     string `key:"sound" `
	Title     string `key:"title" `
	URL       string `key:"url" `
}

type configProp int
const (
	propBadge     configProp = 0
	propCategory  configProp = 1
	propCopy      configProp = 2
	propDeviceKey configProp = 3
	propGroup     configProp = 4
	propHost      configProp = 5
	propIcon      configProp = 6
	propPath      configProp = 7
	propScheme    configProp = 8
	propSound     configProp = 9
	propTitle     configProp = 10
	propURL       configProp = 11
	propCount = 12
)
var propNames = []string{
	"Badge",
	"Category",
	"Copy",
	"DeviceKey",
	"Group",
	"Host",
	"Icon",
	"Path",
	"Scheme",
	"Sound",
	"Title",
	"URL",
}

// Note that propKeys may not align with propNames, as a property can have no or multiple keys
var propKeys = []string{
	"badge",
	"category",
	"copy",
	"group",
	"icon",
	"scheme",
	"sound",
	"title",
	"url",
}

var keyProp = []configProp{
	propBadge,
	propCategory,
	propCopy,
	propGroup,
	propIcon,
	propScheme,
	propSound,
	propTitle,
	propURL,
}

var defaultValues = []string{
	"0",
	"",
	"",
	"",
	"",
	"",
	"",
	"/",
	"https",
	"",
	"",
	"",
}

var primaryKeys = []int{
	0,
	1,
	2,
	-1,
	3,
	-1,
	4,
	-1,
	5,
	6,
	7,
	8,
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         ( 
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		User: url.UserPassword("", config.DeviceKey),
		Host: config.Host,
		Path: config.Path,
		RawQuery: config.QueryValues().Encode(),
		Scheme: Scheme,
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         ( 
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(url *url.URL) error {
	updates := make(map[string]string, propCount)
	updates["Host"] = url.Host
	if pwd, found := url.User.Password(); found {
		updates["DeviceKey"] = pwd
	}
	updates["Path"] = url.Path

	for key, value := range url.Query() {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates); if err != nil {
		return err
	}

	if config.DeviceKey == "" {
		return fmt.Errorf("DeviceKey missing from config URL")
	}

	if config.Host == "" {
		return fmt.Errorf("Host missing from config URL")
	}

	return nil
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                ( 
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{
	}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[string]string) error {
	var last_err error
	for key, value := range updates {
		switch key {
		case "Badge":
			if val, err := format.ParseNumberValue(value, 10); err != nil {
				last_err = err
			} else {
				config.Badge = val
			}
		case "Category":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Category = val
			}
		case "Copy":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Copy = val
			}
		case "DeviceKey":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.DeviceKey = val
			}
		case "Group":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Group = val
			}
		case "Host":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Host = val
			}
		case "Icon":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Icon = val
			}
		case "Path":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Path = val
			}
		case "Scheme":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Scheme = val
			}
		case "Sound":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Sound = val
			}
		case "Title":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Title = val
			}
		case "URL":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.URL = val
			}
		default:
			last_err = fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %q: %v", key, last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) propValue(prop configProp) string {
	switch prop {
	case propBadge:
		return format.FormatNumberValue(config.Badge, 10)
	case propCategory:
		return format.FormatTextValue(config.Category)
	case propCopy:
		return format.FormatTextValue(config.Copy)
	case propDeviceKey:
		return format.FormatTextValue(config.DeviceKey)
	case propGroup:
		return format.FormatTextValue(config.Group)
	case propHost:
		return format.FormatTextValue(config.Host)
	case propIcon:
		return format.FormatTextValue(config.Icon)
	case propPath:
		return format.FormatTextValue(config.Path)
	case propScheme:
		return format.FormatTextValue(config.Scheme)
	case propSound:
		return format.FormatTextValue(config.Sound)
	case propTitle:
		return format.FormatTextValue(config.Title)
	case propURL:
		return format.FormatTextValue(config.URL)
	default:
		return ""
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Helpers                        ( 
// (___________________________________)


func propNameFromKey(key string) (string, error) {
	key = strings.ToLower(key)
	for i, pk := range propKeys {
		if key == pk {
			return propNames[keyProp[i]], nil
		}
	}
	return "", fmt.Errorf("invalid key %q", key)
}

// UpdateFromParams updates the configuration from the supplied params
func (config *Config) UpdateFromParams(params *types.Params) error {
	if params == nil {
		return nil
	}
	updates := make(map[string]string, len(*params))
	for key, value := range *params {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}


// UpdateFromQuery updates the configuration from the supplied query values
func (config *Config) UpdateFromQuery(values url.Values) error {
	updates := make(map[string]string, len(values))
	for key, value := range values {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}

// Init sets all the Config properties to their default values
func (config *Config) Init() error {
	updates := make(map[string]string, propCount)
	for i, name := range propNames {
		updates[name] = defaultValues[i]
	}
	return config.Update(updates)
}

// QueryValues returns a url.Values populated from the configuration
func (config *Config) QueryValues() url.Values {
	values := make(url.Values, propCount)
	for i := range propNames {
		if primaryKeys[i] < 0 {
			continue
		}
		value := config.propValue(configProp(i))
		if value == defaultValues[i] {
			continue
		}
		values.Set(propKeys[primaryKeys[i]], config.propValue(configProp(i)))
	}
	return values
}
	
