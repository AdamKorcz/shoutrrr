// Code generated by "shoutrrr-gen --lang go ../../../spec/googlechat.yml"; DO NOT EDIT.
package googlechat

import (
	"fmt"
	"net/url"
	"strings"

	"github.com/containrrr/shoutrrr/pkg/types"
	"github.com/containrrr/shoutrrr/pkg/format"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          ( 
// (___________________________________)

type Config struct {
	Host  string `url:"host" `
	Key   string `key:"key" `
	Path  string `url:"path" `
	Token string `key:"token" `
}

type configProp int
const (
	propHost  configProp = 0
	propKey   configProp = 1
	propPath  configProp = 2
	propToken configProp = 3
	propCount = 4
)
var propNames = []string{
	"Host",
	"Key",
	"Path",
	"Token",
}

// Note that propKeys may not align with propNames, as a property can have no or multiple keys
var propKeys = []string{
	"key",
	"token",
}

var keyProp = []configProp{
	propKey,
	propToken,
}

var defaultValues = []string{
	"chat.googleapis.com",
	"",
	"",
	"",
}

var primaryKeys = []int{
	-1,
	0,
	-1,
	1,
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         ( 
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		// Userinfo fields are not used for configuration
		Host: config.Host,
		Path: string(config.Path),
		RawQuery: config.QueryValues().Encode(),
		Scheme: Scheme,
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         ( 
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(url *url.URL) error {
	updates := make(map[string]string, propCount)
	updates["Host"] = url.Host
	updates["Path"] = url.Path

	for key, value := range url.Query() {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates); if err != nil {
		return err
	}

	if config.Key == "" {
		return fmt.Errorf("Key missing from config URL")
	}

	if config.Path == "" {
		return fmt.Errorf("Path missing from config URL")
	}

	if config.Token == "" {
		return fmt.Errorf("Token missing from config URL")
	}

	return nil
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                ( 
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{
	}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[string]string) error {
	var last_err error
	for key, value := range updates {
		switch key {
		case "Host":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Host = val
			}
		case "Key":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Key = val
			}
		case "Path":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Path = val
			}
		case "Token":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Token = val
			}
		default:
			last_err = fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %q: %v", key, last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) propValue(prop configProp) string {
	switch prop {
	case propHost:
		return format.FormatTextValue(config.Host)
	case propKey:
		return format.FormatTextValue(config.Key)
	case propPath:
		return format.FormatTextValue(config.Path)
	case propToken:
		return format.FormatTextValue(config.Token)
	default:
		return ""
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Helpers                        ( 
// (___________________________________)


func propNameFromKey(key string) (string, error) {
	key = strings.ToLower(key)
	for i, pk := range propKeys {
		if key == pk {
			return propNames[keyProp[i]], nil
		}
	}
	return "", fmt.Errorf("invalid key %q", key)
}

// UpdateFromParams updates the configuration from the supplied params
func (config *Config) UpdateFromParams(params *types.Params) error {
	if params == nil {
		return nil
	}
	updates := make(map[string]string, len(*params))
	for key, value := range *params {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}


// UpdateFromQuery updates the configuration from the supplied query values
func (config *Config) UpdateFromQuery(values url.Values) error {
	updates := make(map[string]string, len(values))
	for key, value := range values {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}

// Init sets all the Config properties to their default values
func (config *Config) Init() error {
	updates := make(map[string]string, propCount)
	for i, name := range propNames {
		updates[name] = defaultValues[i]
	}
	return config.Update(updates)
}

// QueryValues returns a url.Values populated from the configuration
func (config *Config) QueryValues() url.Values {
	values := make(url.Values, propCount)
	for i := range propNames {
		if primaryKeys[i] < 0 {
			continue
		}
		value := config.propValue(configProp(i))
		if value == defaultValues[i] {
			continue
		}
		values.Set(propKeys[primaryKeys[i]], config.propValue(configProp(i)))
	}
	return values
}
	
