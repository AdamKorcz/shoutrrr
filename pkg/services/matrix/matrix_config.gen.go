// Code generated by "shoutrrr-gen "; DO NOT EDIT.
package matrix

import (
	"fmt"
	"net/url"

	"github.com/containrrr/shoutrrr/pkg/conf"
	"github.com/containrrr/shoutrrr/pkg/types"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          (
// (___________________________________)

type Config struct {
	DisableTLS bool     `key:"disabletls" `
	Host       string   `url:"host" `
	Password   string   `url:"password" `
	Rooms      []string `key:"rooms,room" `
	Title      string   `key:"title" `
	User       string   `url:"user" `
}

type configProp int

const (
	propDisableTLS configProp = 0
	propHost       configProp = 1
	propPassword   configProp = 2
	propRooms      configProp = 3
	propTitle      configProp = 4
	propUser       configProp = 5
	propCount                 = 6
)

var propInfo = types.ConfigPropInfo{
	PropNames: []string{
		"DisableTLS",
		"Host",
		"Password",
		"Rooms",
		"Title",
		"User",
	},

	// Note that propKeys may not align with propNames, as a property can have no or multiple keys
	Keys: []string{
		"disabletls",
		"room",
		"rooms",
		"title",
	},

	DefaultValues: []string{
		"No",
		"",
		"",
		"",
		"",
		"",
	},

	PrimaryKeys: []int{
		0,
		-1,
		-1,
		2,
		3,
		-1,
	},

	KeyPropIndexes: map[string]int{
		"disabletls": 0,
		"room":       3,
		"rooms":      3,
		"title":      4,
	},
}

func (_ *Config) PropInfo() *types.ConfigPropInfo {
	return &propInfo
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         (
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		User:     conf.UserInfoOrNil(url.UserPassword(config.User, config.Password)),
		Host:     config.Host,
		Path:     "",
		RawQuery: conf.QueryValues(config).Encode(),
		Scheme:   Scheme,
	}
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         (
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(configURL *url.URL) error {
	if lc, ok := (interface{})(config).(types.ConfigWithLegacyURLSupport); ok {
		configURL = lc.UpdateLegacyURL(configURL)
	}
	updates := make(map[int]string, propCount)
	updates[int(propHost)] = configURL.Hostname()
	if pwd, found := configURL.User.Password(); found {
		updates[int(propPassword)] = pwd
	}
	updates[int(propUser)] = configURL.User.Username()
	if configURL.Path != "" && configURL.Path != "/" {
		return fmt.Errorf("unexpected path in config URL: %v", configURL.Path)
	}

	for key, value := range configURL.Query() {

		if propIndex, found := propInfo.PropIndexFor(key); found {
			updates[propIndex] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates)
	if err != nil {
		return err
	}

	if config.Host == "" {
		return fmt.Errorf("host missing from config URL")
	}

	if config.Password == "" {
		return fmt.Errorf("password missing from config URL")
	}

	return nil
}

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                (
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[int]string) error {
	var last_err error
	for index, value := range updates {
		switch configProp(index) {
		case propDisableTLS:
			if val, err := conf.ParseToggleValue(value); err != nil {
				last_err = err
			} else {
				config.DisableTLS = val
			}
		case propHost:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Host = val
			}
		case propPassword:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Password = val
			}
		case propRooms:
			if val, err := conf.ParseListValue(value, ","); err != nil {
				last_err = err
			} else {
				config.Rooms = val
			}
		case propTitle:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Title = val
			}
		case propUser:
			if val, err := conf.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.User = val
			}
		default:
			return fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %v: %v", propInfo.PropNames[index], last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) PropValue(prop int) string {
	switch configProp(prop) {
	case propDisableTLS:
		return conf.FormatToggleValue(config.DisableTLS)
	case propHost:
		return conf.FormatTextValue(config.Host)
	case propPassword:
		return conf.FormatTextValue(config.Password)
	case propRooms:
		return conf.FormatListValue(config.Rooms, ",")
	case propTitle:
		return conf.FormatTextValue(config.Title)
	case propUser:
		return conf.FormatTextValue(config.User)
	default:
		return ""
	}
}
