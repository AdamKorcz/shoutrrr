// Code generated by "shoutrrr-gen --lang go ../../../spec/telegram.yml"; DO NOT EDIT.
package telegram

import (
	"fmt"
	"net/url"
	"strings"

	"github.com/containrrr/shoutrrr/pkg/types"
	"github.com/containrrr/shoutrrr/pkg/format"
)

// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Props                          ( 
// (___________________________________)

type Config struct {
	APIHost      string `url:"host" `
	BotID        string `url:"user" `
	Chats        []string `key:"chats,channels" `
	Notification bool `key:"notification" `
	ParseMode    parseModeOption `key:"parsemode" `
	Preview      bool `key:"preview" `
	Title        string `key:"title" `
	Token        string `url:"password" `
}

type configProp int
const (
	propAPIHost      configProp = 0
	propBotID        configProp = 1
	propChats        configProp = 2
	propNotification configProp = 3
	propParseMode    configProp = 4
	propPreview      configProp = 5
	propTitle        configProp = 6
	propToken        configProp = 7
	propCount = 8
)
var propNames = []string{
	"APIHost",
	"BotID",
	"Chats",
	"Notification",
	"ParseMode",
	"Preview",
	"Title",
	"Token",
}

// Note that propKeys may not align with propNames, as a property can have no or multiple keys
var propKeys = []string{
	"channels",
	"chats",
	"notification",
	"parsemode",
	"preview",
	"title",
}

var keyProp = []configProp{
	propChats,
	propChats,
	propNotification,
	propParseMode,
	propPreview,
	propTitle,
}

var defaultValues = []string{
	"telegram",
	"",
	"",
	"Yes",
	"None",
	"Yes",
	"",
	"",
}

var primaryKeys = []int{
	-1,
	-1,
	1,
	2,
	3,
	4,
	5,
	-1,
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  GetURL                         ( 
// (___________________________________)

// GetURL returns a URL representation of it's current field values
func (config *Config) GetURL() *url.URL {
	return &url.URL{
		User: url.UserPassword(config.BotID, config.Token),
		Host: config.APIHost,
		Path: "/",
		RawQuery: config.QueryValues().Encode(),
		Scheme: Scheme,
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  SetURL                         ( 
// (___________________________________)

// SetURL updates a ServiceConfig from a URL representation of it's field values
func (config *Config) SetURL(url *url.URL) error {
	updates := make(map[string]string, propCount)
	updates["APIHost"] = url.Host
	updates["BotID"] = url.User.Username()
	if pwd, found := url.User.Password(); found {
		updates["Token"] = pwd
	}

	for key, value := range url.Query() {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}

	err := config.Update(updates); if err != nil {
		return err
	}

	if config.BotID == "" {
		return fmt.Errorf("BotID missing from config URL")
	}

	if len(config.Chats) == 0 {
		return fmt.Errorf("Chats missing from config URL")
	}

	if config.Token == "" {
		return fmt.Errorf("Token missing from config URL")
	}

	return nil
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Enums / Options                ( 
// (___________________________________)

func (config *Config) Enums() map[string]types.EnumFormatter {
	return map[string]types.EnumFormatter{
		"ParseMode": ParseModeOptions.Formatter,
	}
}


/* == ParseMode Option ======================== */

type parseModeOption int

type parseModeOptionVals struct {
	None	parseModeOption
	Markdown	parseModeOption
	HTML	parseModeOption
	MarkdownV2	parseModeOption
	Formatter types.EnumFormatter
}

var ParseModeOptions = &parseModeOptionVals {
	None:	0,
	Markdown:	1,
	HTML:	2,
	MarkdownV2:	3,
	Formatter: format.CreateEnumFormatter([]string{
		"None",
		"Markdown",
		"HTML",
		"MarkdownV2",
	}),
}

func (ov *parseModeOptionVals) Parse(v string) (parseModeOption, error) {
	if val := ov.Formatter.Parse(v); val != format.EnumInvalid {
		return parseModeOption(val), nil
	} else {
		return parseModeOption(val), fmt.Errorf("invalid option %q for ParseMode", v)
	}
}

// Update updates the Config from a map of it's properties
func (config *Config) Update(updates map[string]string) error {
	var last_err error
	for key, value := range updates {
		switch key {
		case "APIHost":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.APIHost = val
			}
		case "BotID":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.BotID = val
			}
		case "Chats":
			if val, err := format.ParseListValue(value); err != nil {
				last_err = err
			} else {
				config.Chats = val
			}
		case "Notification":
			if val, err := format.ParseToggleValue(value); err != nil {
				last_err = err
			} else {
				config.Notification = val
			}
		case "ParseMode":
			if val, err := ParseModeOptions.Parse(value); err != nil {
				last_err = err
			} else {
				config.ParseMode = val
			}
		case "Preview":
			if val, err := format.ParseToggleValue(value); err != nil {
				last_err = err
			} else {
				config.Preview = val
			}
		case "Title":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Title = val
			}
		case "Token":
			if val, err := format.ParseTextValue(value); err != nil {
				last_err = err
			} else {
				config.Token = val
			}
		default:
			last_err = fmt.Errorf("invalid key")
		}
		if last_err != nil {
			return fmt.Errorf("failed to set value for %q: %v", key, last_err)
		}
	}
	return nil
}

// Update updates the Config from a map of it's properties
func (config *Config) propValue(prop configProp) string {
	switch prop {
	case propAPIHost:
		return format.FormatTextValue(config.APIHost)
	case propBotID:
		return format.FormatTextValue(config.BotID)
	case propChats:
		return format.FormatListValue(config.Chats)
	case propNotification:
		return format.FormatToggleValue(config.Notification)
	case propParseMode:
		return ParseModeOptions.Formatter.Print(int(config.ParseMode))
	case propPreview:
		return format.FormatToggleValue(config.Preview)
	case propTitle:
		return format.FormatTextValue(config.Title)
	case propToken:
		return format.FormatTextValue(config.Token)
	default:
		return ""
	}
}


// (‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾)
//  )  Helpers                        ( 
// (___________________________________)


func propNameFromKey(key string) (string, error) {
	key = strings.ToLower(key)
	for i, pk := range propKeys {
		if key == pk {
			return propNames[keyProp[i]], nil
		}
	}
	return "", fmt.Errorf("invalid key %q", key)
}

// UpdateFromParams updates the configuration from the supplied params
func (config *Config) UpdateFromParams(params *types.Params) error {
	if params == nil {
		return nil
	}
	updates := make(map[string]string, len(*params))
	for key, value := range *params {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}


// UpdateFromQuery updates the configuration from the supplied query values
func (config *Config) UpdateFromQuery(values url.Values) error {
	updates := make(map[string]string, len(values))
	for key, value := range values {
		propName, err := propNameFromKey(key)
		if err == nil {
			updates[propName] = value[0]
		} else if key != "title" {
			return fmt.Errorf("invalid key %q", key)
		}
	}
	return config.Update(updates)
}

// Init sets all the Config properties to their default values
func (config *Config) Init() error {
	updates := make(map[string]string, propCount)
	for i, name := range propNames {
		updates[name] = defaultValues[i]
	}
	return config.Update(updates)
}

// QueryValues returns a url.Values populated from the configuration
func (config *Config) QueryValues() url.Values {
	values := make(url.Values, propCount)
	for i := range propNames {
		if primaryKeys[i] < 0 {
			continue
		}
		value := config.propValue(configProp(i))
		if value == defaultValues[i] {
			continue
		}
		values.Set(propKeys[primaryKeys[i]], config.propValue(configProp(i)))
	}
	return values
}
	
